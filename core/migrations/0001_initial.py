# Generated by Django 4.2.7 on 2025-07-21 07:40

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='部门名称')),
                ('description', models.TextField(blank=True, verbose_name='部门描述')),
                ('lead', models.CharField(blank=True, max_length=100, verbose_name='部门负责人')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': '部门',
                'verbose_name_plural': '部门',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Finding',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=511, verbose_name='标题')),
                ('date', models.DateField(default=django.utils.timezone.now, verbose_name='发现日期')),
                ('severity', models.CharField(choices=[('Info', 'Info'), ('Low', 'Low'), ('Medium', 'Medium'), ('High', 'High'), ('Critical', 'Critical')], max_length=200, verbose_name='严重程度')),
                ('numerical_severity', models.CharField(max_length=4, verbose_name='数值严重程度')),
                ('cvssv3', models.TextField(blank=True, max_length=117, null=True, verbose_name='CVSS v3向量')),
                ('cvssv3_score', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(10.0)], verbose_name='CVSS v3分数')),
                ('cwe', models.IntegerField(blank=True, default=0, null=True, verbose_name='CWE编号')),
                ('description', models.TextField(verbose_name='漏洞描述')),
                ('message', models.TextField(verbose_name='原始消息')),
                ('translated_message', models.TextField(blank=True, verbose_name='中文描述')),
                ('file_path', models.CharField(max_length=1000, verbose_name='文件路径')),
                ('line_number', models.IntegerField(verbose_name='行号')),
                ('column_number', models.IntegerField(blank=True, null=True, verbose_name='列号')),
                ('active', models.BooleanField(default=True, verbose_name='活跃状态')),
                ('verified', models.BooleanField(default=False, verbose_name='已验证')),
                ('false_p', models.BooleanField(default=False, verbose_name='误报')),
                ('duplicate', models.BooleanField(default=False, verbose_name='重复')),
                ('out_of_scope', models.BooleanField(default=False, verbose_name='超出范围')),
                ('risk_accepted', models.BooleanField(default=False, verbose_name='风险接受')),
                ('under_review', models.BooleanField(default=False, verbose_name='审核中')),
                ('is_mitigated', models.BooleanField(default=False, verbose_name='已缓解')),
                ('mitigated', models.DateTimeField(blank=True, null=True, verbose_name='缓解时间')),
                ('last_reviewed', models.DateTimeField(blank=True, null=True, verbose_name='最后审核时间')),
                ('last_status_update', models.DateTimeField(auto_now=True, verbose_name='状态更新时间')),
                ('code_owner', models.CharField(blank=True, max_length=100, verbose_name='代码负责人')),
                ('assigned_to', models.CharField(blank=True, max_length=100, verbose_name='分配给')),
                ('reporter', models.CharField(max_length=100, verbose_name='报告人')),
                ('ai_analysis', models.JSONField(default=dict, verbose_name='AI分析结果')),
                ('ai_cached', models.BooleanField(default=False, verbose_name='AI结果缓存')),
                ('source_context', models.JSONField(default=dict, verbose_name='源码上下文')),
                ('tags', models.JSONField(default=list, verbose_name='标签')),
                ('metadata', models.JSONField(default=dict, verbose_name='元数据')),
                ('vuln_id_from_tool', models.CharField(blank=True, max_length=200, verbose_name='工具漏洞ID')),
                ('unique_id_from_tool', models.CharField(blank=True, max_length=200, verbose_name='工具唯一ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': '漏洞发现',
                'verbose_name_plural': '漏洞发现',
                'ordering': ['-numerical_severity', '-date'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='项目名称')),
                ('description', models.TextField(blank=True, verbose_name='项目描述')),
                ('code_owner', models.CharField(max_length=100, verbose_name='代码负责人')),
                ('tech_lead', models.CharField(blank=True, max_length=100, verbose_name='技术负责人')),
                ('source_path', models.CharField(blank=True, max_length=1000, verbose_name='源码路径')),
                ('report_path', models.CharField(blank=True, max_length=1000, verbose_name='报告路径')),
                ('repository_url', models.URLField(blank=True, verbose_name='代码仓库')),
                ('business_criticality', models.CharField(choices=[('low', '低'), ('medium', '中'), ('high', '高'), ('critical', '关键')], default='medium', max_length=20, verbose_name='业务重要性')),
                ('tags', models.JSONField(default=list, verbose_name='标签')),
                ('metadata', models.JSONField(default=dict, verbose_name='扩展信息')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否活跃')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.department', verbose_name='所属部门')),
            ],
            options={
                'verbose_name': '项目',
                'verbose_name_plural': '项目',
                'ordering': ['department__name', 'name'],
                'unique_together': {('department', 'name')},
            },
        ),
        migrations.CreateModel(
            name='StatusHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_status', models.CharField(max_length=50, verbose_name='原状态')),
                ('to_status', models.CharField(max_length=50, verbose_name='新状态')),
                ('reason', models.TextField(blank=True, verbose_name='变更原因')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('changed_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='操作人')),
                ('finding', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='status_history', to='core.finding')),
            ],
            options={
                'verbose_name': '状态历史',
                'verbose_name_plural': '状态历史',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ScanTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tool_name', models.CharField(choices=[('codeql', 'CodeQL'), ('semgrep', 'Semgrep'), ('sonarqube', 'SonarQube'), ('checkmarx', 'Checkmarx'), ('veracode', 'Veracode')], max_length=50, verbose_name='扫描工具')),
                ('scan_type', models.CharField(max_length=30, verbose_name='扫描类型')),
                ('status', models.CharField(choices=[('pending', '待处理'), ('running', '运行中'), ('completed', '已完成'), ('failed', '失败')], default='pending', max_length=20, verbose_name='状态')),
                ('report_file', models.CharField(blank=True, max_length=1000, verbose_name='报告文件路径')),
                ('file_size', models.BigIntegerField(blank=True, null=True, verbose_name='文件大小')),
                ('scan_config', models.JSONField(default=dict, verbose_name='扫描配置')),
                ('total_findings', models.IntegerField(default=0, verbose_name='发现总数')),
                ('critical_count', models.IntegerField(default=0, verbose_name='严重漏洞数')),
                ('high_count', models.IntegerField(default=0, verbose_name='高危漏洞数')),
                ('medium_count', models.IntegerField(default=0, verbose_name='中危漏洞数')),
                ('low_count', models.IntegerField(default=0, verbose_name='低危漏洞数')),
                ('info_count', models.IntegerField(default=0, verbose_name='信息漏洞数')),
                ('started_at', models.DateTimeField(blank=True, null=True, verbose_name='开始时间')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='完成时间')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('error_message', models.TextField(blank=True, verbose_name='错误信息')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.project', verbose_name='项目')),
            ],
            options={
                'verbose_name': '扫描任务',
                'verbose_name_plural': '扫描任务',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='FindingNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='备注内容')),
                ('is_private', models.BooleanField(default=False, verbose_name='私有备注')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='作者')),
                ('finding', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='core.finding')),
            ],
            options={
                'verbose_name': '漏洞备注',
                'verbose_name_plural': '漏洞备注',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='finding',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.project', verbose_name='项目'),
        ),
        migrations.AddField(
            model_name='finding',
            name='scan_task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.scantask', verbose_name='扫描任务'),
        ),
        migrations.AddIndex(
            model_name='finding',
            index=models.Index(fields=['severity', 'active'], name='core_findin_severit_830f82_idx'),
        ),
        migrations.AddIndex(
            model_name='finding',
            index=models.Index(fields=['project', 'severity'], name='core_findin_project_4e4b92_idx'),
        ),
        migrations.AddIndex(
            model_name='finding',
            index=models.Index(fields=['scan_task', 'active'], name='core_findin_scan_ta_995707_idx'),
        ),
        migrations.AddIndex(
            model_name='finding',
            index=models.Index(fields=['file_path', 'line_number'], name='core_findin_file_pa_65fbca_idx'),
        ),
    ]
