# Generated by Django 4.2.16 on 2025-01-23 12:00

from django.db import migrations
import re


def extract_cwe_number(cwe_input):
    """从任意输入中提取CWE编号"""
    if not cwe_input:
        return None
    
    patterns = [
        r'CWE-(\d+)',
        r'cwe-(\d+)', 
        r'CWE(\d+)',
        r'cwe(\d+)',
        r'^(\d+)$'  # 纯数字
    ]
    
    cwe_str = str(cwe_input).strip()
    for pattern in patterns:
        match = re.search(pattern, cwe_str, re.IGNORECASE)
        if match:
            return int(match.group(1))
    
    return None


def get_cwe_threat_level_score(cwe_num):
    """根据CWE编号返回威胁级别基础分"""
    
    # 代码执行类 - 极高风险 (9.0-10.0)
    if cwe_num in [
        77, 78, 89, 94, 95, 96, 97, 98,
        120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139,
        787, 788,
        415, 416, 476, 690, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
        502, 503,
    ]:
        return 9.5
    
    # XSS和权限类 - 高风险 (7.5-8.9)
    elif cwe_num in [
        79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93,
        269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286,
        287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306,
        862, 863, 864, 865, 866, 867, 868, 869, 870,
        22, 23, 36, 73, 74, 75, 76,
        434, 435, 436, 437,
    ]:
        return 8.0
    
    # 信息泄露和中等威胁 - 中高风险 (6.0-7.4)
    elif cwe_num in [
        200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219,
        532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550,
        918, 919, 920, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610,
        400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414,
        20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40,
        190, 191, 192, 193, 194, 195, 196, 197, 198, 199,
    ]:
        return 6.5
    
    # 配置和加密问题 - 中等风险 (4.5-5.9)
    elif cwe_num in [
        310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329,
        330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346,
        798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810,
        16, 17, 18, 19, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1,
        117, 118, 730, 731, 732, 733, 734, 735,
        113, 114, 115, 116,
        353, 354, 355, 356, 357, 358, 359, 360, 361,
    ]:
        return 5.0
    
    # 其他轻微问题 - 低风险 (2.0-4.4)
    else:
        return 3.5


def calculate_universal_vulnerability_score(cwe_input, cvss_score=None):
    """通用漏洞评分算法"""
    
    # CWE Top 25 2024 精确评分表
    CWE_TOP_25_2024_SCORES = {
        'CWE-79': 10.0,   # XSS - 第1名
        'CWE-787': 9.8,   # Out-of-bounds Write - 第2名
        'CWE-89': 9.6,    # SQL Injection - 第3名
        'CWE-352': 6.8,   # CSRF - 第4名 (特殊处理)
        'CWE-22': 9.2,    # Path Traversal - 第5名
        'CWE-125': 9.0,   # Out-of-bounds Read - 第6名
        'CWE-78': 8.8,    # OS Command Injection - 第7名
        'CWE-416': 8.6,   # Use After Free - 第8名
        'CWE-862': 8.4,   # Missing Authorization - 第9名
        'CWE-434': 8.2,   # Unrestricted Upload - 第10名
        'CWE-94': 8.0,    # Code Injection - 第11名
        'CWE-20': 7.8,    # Improper Input Validation - 第12名
        'CWE-77': 7.6,    # Command Injection - 第13名
        'CWE-287': 7.4,   # Improper Authentication - 第14名
        'CWE-269': 7.2,   # Improper Privilege Management - 第15名
        'CWE-502': 7.0,   # Deserialization - 第16名
        'CWE-200': 6.8,   # Information Exposure - 第17名
        'CWE-863': 6.6,   # Incorrect Authorization - 第18名
        'CWE-918': 6.4,   # SSRF - 第19名
        'CWE-119': 6.2,   # Memory Buffer - 第20名
        'CWE-476': 6.0,   # NULL Pointer - 第21名
        'CWE-798': 5.8,   # Hard-coded Credentials - 第22名
        'CWE-190': 5.6,   # Integer Overflow - 第23名
        'CWE-400': 5.4,   # Resource Consumption - 第24名
        'CWE-306': 5.2,   # Missing Authentication - 第25名
    }
    
    # OWASP Top 10 2025 权重
    OWASP_2025_WEIGHTS = {
        79: 1.2, 89: 1.2, 78: 1.2, 94: 1.2, 77: 1.2,  # A03:2025 – Injection
        22: 1.0, 862: 1.0, 863: 1.0, 269: 1.0, 352: 0.3,  # A01:2025 – Broken Access Control
        918: 0.8,  # A10:2025 – SSRF
        287: 0.8, 306: 0.8, 798: 0.8,  # A07:2025 – Authentication Failures
        502: 0.6,  # A08:2025 – Software and Data Integrity Failures
        200: 0.4, 532: 0.4, 117: 0.2,  # A09:2025 – Security Logging and Monitoring Failures
        434: 0.6, 20: 0.4, 190: 0.4,  # A04:2025 – Insecure Design
        400: 0.4,  # A06:2025 – Vulnerable Components
        327: 0.6, 319: 0.6,  # A02:2025 – Cryptographic Failures
    }
    
    # 1. 提取CWE编号
    cwe_num = extract_cwe_number(cwe_input)
    if not cwe_num:
        return 5.0, "中危"
    
    cwe_standard = f"CWE-{cwe_num}"
    
    # 2. 获取CWE基础分
    if cwe_standard in CWE_TOP_25_2024_SCORES:
        base_score = CWE_TOP_25_2024_SCORES[cwe_standard]
    else:
        base_score = get_cwe_threat_level_score(cwe_num)
    
    # 3. 应用OWASP权重
    owasp_weight = OWASP_2025_WEIGHTS.get(cwe_num, 0.0)
    weighted_score = base_score + owasp_weight
    
    # 4. CVSS校准 (可选)
    cvss_adjustment = 0.0
    if cvss_score and cvss_score > 0:
        realistic_cvss = cvss_score * 0.75
        deviation = abs(weighted_score - realistic_cvss)
        
        if deviation > 2.0:
            cvss_adjustment = min(0.5, deviation * 0.1)
            if weighted_score > realistic_cvss:
                cvss_adjustment = -cvss_adjustment
    
    # 5. 计算最终评分
    final_score = weighted_score + cvss_adjustment
    final_score = max(0.0, min(10.0, final_score))
    
    # 6. 确定严重程度
    if final_score >= 8.0:
        severity = "高危"
    elif final_score >= 5.5:
        severity = "中危"
    else:
        severity = "低危"
    
    return final_score, severity


def update_vulnerability_scoring(apps, schema_editor):
    """更新现有漏洞的评分"""
    Finding = apps.get_model('core', 'Finding')
    
    updated_count = 0
    total_count = Finding.objects.count()
    
    print(f"开始更新 {total_count} 个漏洞的评分...")
    
    for finding in Finding.objects.all():
        old_severity = finding.severity
        old_score = finding.cvssv3_score
        
        # 计算新的评分
        new_score, new_severity = calculate_universal_vulnerability_score(
            cwe_input=finding.cwe,
            cvss_score=finding.cvssv3_score
        )
        
        # 更新评分和严重程度
        finding.cvssv3_score = new_score
        finding.severity = new_severity
        
        # 更新数值严重程度
        severity_map = {"低危": "S1", "中危": "S2", "高危": "S3"}
        finding.numerical_severity = severity_map.get(new_severity, "S1")
        
        # 更新metadata记录评分变化
        if not finding.metadata:
            finding.metadata = {}
        
        finding.metadata.update({
            'scoring_update': {
                'old_severity': old_severity,
                'new_severity': new_severity,
                'old_score': old_score,
                'new_score': new_score,
                'updated_at': '2025-01-23',
                'method': 'universal_cwe_scoring'
            }
        })
        
        finding.save()
        updated_count += 1
        
        if updated_count % 100 == 0:
            print(f"已更新 {updated_count}/{total_count} 个漏洞...")
    
    print(f"✅ 完成！共更新了 {updated_count} 个漏洞的评分")


def reverse_update_vulnerability_scoring(apps, schema_editor):
    """回滚评分更新"""
    Finding = apps.get_model('core', 'Finding')
    
    reverted_count = 0
    
    for finding in Finding.objects.all():
        if finding.metadata and 'scoring_update' in finding.metadata:
            # 恢复旧的评分
            old_data = finding.metadata['scoring_update']
            finding.severity = old_data.get('old_severity', finding.severity)
            finding.cvssv3_score = old_data.get('old_score', finding.cvssv3_score)
            
            # 更新数值严重程度
            severity_map = {"低危": "S1", "中危": "S2", "高危": "S3"}
            finding.numerical_severity = severity_map.get(finding.severity, "S1")
            
            # 移除更新记录
            del finding.metadata['scoring_update']
            
            finding.save()
            reverted_count += 1
    
    print(f"✅ 回滚完成！共恢复了 {reverted_count} 个漏洞的评分")


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0004_alter_project_git_branch_alter_project_git_url_and_more'),
    ]

    operations = [
        migrations.RunPython(
            update_vulnerability_scoring,
            reverse_update_vulnerability_scoring,
        ),
    ]